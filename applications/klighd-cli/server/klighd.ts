/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 *
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * This code is provided under the terms of the Eclipse Public License (EPL).
 */
// Distributable CLI script that starts a standalone diagram view and provides a
// link to view the diagram for a given file.

import { Command } from "commander";
import open from "open";
import { pathToFileURL } from "url";
import { parseIntOrUndefined } from "./helpers";
import { createServer } from "./server";

const program = new Command();
program
    .version("0.0.1")
    .description(
        "Starts a webserver to view a diagram for a given file. The diagram is generated by a separate language server which is not bundled with this executable."
    )
    .addHelpText(
        "after",
        `
Alternatively the path to a language server jar can be configured with the environment
variable LS_PATH. The path option takes precedence over the environment variable.
If both a path and a port for a language server is provided, the webserver will
use the port to connect to the listening language server.

Example calls:
  $ klighd --ls_port 5007 ./ABRO.sctx
  $ klighd --ls_path ../language-server.jar ./example.elkt`
    );

program
    .arguments("<file>")
    .option(
        "--ls_port <port>",
        "Uses a language server for the synthesis that listens on the given port for connections."
    )
    .option(
        "--ls_path <path>",
        "Starts a language server for the synthesis located as a jar at the given path."
    )
    .option("--no-fit", "Do not resize the diagram to fit the viewport when it is redrawn.")
    .action((file, options, program: Command) => {
        // A path to a language can be configured by an environment variable.
        // The lsp_path option for the command takes a higher preference.
        const lsPath: string | undefined = options.ls_path ?? process.env.LS_PATH;
        const lsPort = parseIntOrUndefined(options.ls_port);

        // Fail fast if no possible LS connection is provided
        if (!lsPath && !lsPort) {
            console.error(
                "Please provide either a path to a language server jar or a port for a listening language server!\n"
            );
            program.help({ error: true });
        }

        // options.fit is true when the --no-fit flag is absent.
        // See https://www.npmjs.com/package/commander#other-option-types-negatable-boolean-and-booleanvalue
        const resizeToFit = options.fit;

        const preferences = `${!resizeToFit ? "&resizeToFit=false" : ""}`;

        const fileUrl = pathToFileURL(file);
        const server = createServer({ lsPort, lsPath });

        server.listen(0, (err, addr) => {
            if (err) {
                console.error(err);
                process.exit(1);
            }

            const url = `${addr}?source=${fileUrl}${preferences}`;

            console.log("KLighD Diagram Viewer\n");
            console.log("Inspect your diagram at:");
            console.log(url);

            open(url);
        });
    });

program.parse(process.argv);
